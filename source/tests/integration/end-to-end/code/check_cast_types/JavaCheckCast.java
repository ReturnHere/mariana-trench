/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.facebook.marianatrench.integrationtests;

import java.util.Random;

/**
 * Mirrors KotlinCheckCast.kt to show the differences between Java and Kotlin byte code where the
 * check-cast instruction is concerned. In general, when casting from derived to base, Java's
 * generated byte code does not contain the check-cast instruction.
 */
public class JavaCheckCast {
  public class Base {
    public void run(Object argument) {}
  }

  public class DerivedWithSink extends Base {
    @Override
    public void run(Object argument) {
      Origin.sink(argument);
    }
  }

  public class DerivedNoSink extends Base {
    @Override
    public void run(Object argument) {}
  }

  // User-defined shim to call klass.run(argument)
  public void shimmed(Base klass, Object argument) {}

  public void issueFromDerivedType() {
    // A check-cast instruction (from Derived -> Base) for the first argument
    // is absent. The corresponding register type is DerivedWithSink.
    shimmed(new DerivedWithSink(), Origin.source());
  }

  public void noIssueFromDerivedType() {
    shimmed(new DerivedNoSink(), Origin.source());
  }

  public void issueFromVirtualBaseType() {
    // There are no check-cast instructions in the byte code.
    Base base = null;
    Random rand = new Random();
    if (rand.nextInt(2) > 0) {
      base = new DerivedWithSink();
    } else {
      base = new DerivedNoSink();
    }

    shimmed(base, Origin.source());
  }

  public void issueFromCastedType(Base base) {
    DerivedWithSink derived = (DerivedWithSink) base;
    shimmed(derived, Origin.source());
  }

  public void noIssueFromCastedType(Base base) {
    // A check-cast (to DerivedNoSink) instruction exists which makes the type
    // more precise for the shim.
    DerivedNoSink derived = (DerivedNoSink) base;
    shimmed(derived, Origin.source());
  }
}
